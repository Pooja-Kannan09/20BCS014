{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\thang\\\\React\\\\react-trains-master\\\\react-trains-master\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { withTranslation } from 'react-i18next';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport DataDisplay from './components/DataDisplay/DataDisplay';\nvar API = 'https://rata.digitraffic.en/api/v1/';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.handleInputChange = function (selectedStation) {\n      _this.setState({\n        selectedStation: selectedStation\n      });\n\n      _this.filterData(selectedStation);\n    };\n\n    _this.state = {\n      error: null,\n      stations: [],\n      // needed as sometimes origin or destination isn't a passenger station\n      passengerStations: [],\n      //used for displaying suggestions in search input\n      todaysTrains: [],\n      selectedStation: null,\n      arrivalData: [],\n      departureData: [],\n      tabIndex: 0 // 0 = arrivals, 1 = departures\n\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAll();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      document.title = this.props.t('title'); // when user switches language\n    }\n  }, {\n    key: \"fetchAll\",\n    value: function fetchAll() {\n      var _this2 = this;\n\n      var dateNow = new Date().toISOString().slice(0, 10); // format of type 2019-02-12\n\n      Promise.all([fetch(\"\".concat(API, \"metadata/stations\")).then(function (response) {\n        return response.json();\n      }), fetch(\"\".concat(API, \"trains/\").concat(dateNow)).then(function (response) {\n        return response.json();\n      })]).then(function (allResponses) {\n        var stations = allResponses[0].map(function (station) {\n          return {\n            value: station.stationShortCode,\n            label: station.stationName.includes(' asema') ? station.stationName.slice(0, -6) : station.stationName\n          };\n        });\n        var passengerStations = allResponses[0].filter(function (station) {\n          return station.passengerTraffic === true;\n        }).map(function (station) {\n          return {\n            value: station.stationShortCode,\n            label: station.stationName.includes(' asema') ? station.stationName.slice(0, -6) : station.stationName\n          };\n        });\n        var todaysTrains = allResponses[1];\n\n        _this2.setState({\n          stations: stations,\n          passengerStations: passengerStations,\n          todaysTrains: todaysTrains\n        });\n      }, function (error) {\n        _this2.setState({\n          error: error\n        });\n      });\n    }\n  }, {\n    key: \"filterData\",\n    value: function filterData(selectedStation) {\n      var _this$state = this.state,\n          todaysTrains = _this$state.todaysTrains,\n          stations = _this$state.stations;\n      var dateTimeNow = new Date().toJSON();\n      var filteredData = todaysTrains.map(function (train) {\n        var trainNumber = train.commuterLineID ? \"Commuter train \".concat(train.commuterLineID) : \"\".concat(train.trainType, \" \").concat(train.trainNumber); //special case for Commuter trains who have their own ID\n\n        var originShortCode = train.timeTableRows[0].stationShortCode; // the origin (Lähtöasema) is the first entry in the timeTable\n\n        var origin = stations.find(function (station) {\n          return station.value === originShortCode;\n        }).label; // retrieves the full name of station by short code\n\n        var destinationShortCode = train.timeTableRows[train.timeTableRows.length - 1]['stationShortCode'];\n        var destination = stations.find(function (station) {\n          return station.value === destinationShortCode;\n        }).label;\n        var scheduledArrivalTime; // arrivals\n\n        var actualArrivalTime;\n\n        var arrivalTimeTable = _objectSpread({}, train.timeTableRows.filter(function (element) {\n          return element.stationShortCode === selectedStation.value && element.type === 'ARRIVAL';\n        })[0]);\n\n        if (arrivalTimeTable) {\n          if (arrivalTimeTable.hasOwnProperty('scheduledTime')) {\n            scheduledArrivalTime = arrivalTimeTable.scheduledTime;\n          }\n\n          if (arrivalTimeTable.hasOwnProperty('actualTime')) {\n            actualArrivalTime = arrivalTimeTable.actualTime;\n          } else if (arrivalTimeTable.hasOwnProperty('liveEstimateTime')) {\n            actualArrivalTime = arrivalTimeTable.liveEstimateTime;\n          } else {\n            actualArrivalTime = false;\n          }\n        }\n\n        var scheduledDepartureTime; // departures\n\n        var actualDepartureTime;\n\n        var departureTimeTable = _objectSpread({}, train.timeTableRows.filter(function (element) {\n          return element.stationShortCode === selectedStation.value && element.type === 'DEPARTURE';\n        })[0]);\n\n        if (departureTimeTable) {\n          if (departureTimeTable.hasOwnProperty('scheduledTime')) {\n            scheduledDepartureTime = departureTimeTable.scheduledTime;\n          }\n\n          if (departureTimeTable.hasOwnProperty('actualTime')) {\n            actualDepartureTime = departureTimeTable.actualTime;\n          } else if (departureTimeTable.hasOwnProperty('liveEstimateTime')) {\n            actualDepartureTime = departureTimeTable.liveEstimateTime;\n          } else {\n            actualDepartureTime = false;\n          }\n        }\n\n        return _objectSpread({}, train, {\n          trainNumber: trainNumber,\n          origin: origin,\n          destination: destination,\n          scheduledArrivalTime: scheduledArrivalTime,\n          actualArrivalTime: actualArrivalTime,\n          scheduledDepartureTime: scheduledDepartureTime,\n          actualDepartureTime: actualDepartureTime\n        });\n      }).filter(function (train) {\n        return train.trainCategory !== 'Cargo';\n      }) // removes cargo entries\n      .filter(function (train) {\n        return train.actualArrivalTime > dateTimeNow || train.scheduledArrivalTime > dateTimeNow || train.actualDepartureTime > dateTimeNow || train.scheduledDepartureTime > dateTimeNow;\n      }); // filters only time entries after \"now\"\n\n      var arrivalData = filteredData.filter(function (entry) {\n        return typeof entry.scheduledArrivalTime !== 'undefined';\n      }).map(function (entry) {\n        return _objectSpread({}, entry, {\n          actualTime: entry.actualArrivalTime,\n          scheduledTime: entry.scheduledArrivalTime\n        });\n      });\n      var departureData = filteredData.filter(function (entry) {\n        return typeof entry.scheduledDepartureTime !== 'undefined';\n      }).map(function (entry) {\n        return _objectSpread({}, entry, {\n          actualTime: entry.actualDepartureTime,\n          scheduledTime: entry.scheduledDepartureTime\n        });\n      });\n      this.setState({\n        arrivalData: arrivalData,\n        departureData: departureData\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          error = _this$state2.error,\n          tabIndex = _this$state2.tabIndex,\n          arrivalData = _this$state2.arrivalData,\n          departureData = _this$state2.departureData,\n          todaysTrains = _this$state2.todaysTrains;\n      var t = this.props.t;\n      var errorDisplay = React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, error ? error.message : null);\n      var content = todaysTrains.length === 0 ? React.createElement(\"p\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, t('Loading'), \"...\") : React.createElement(Tabs, {\n        selectedIndex: tabIndex,\n        onSelect: function onSelect(tabIndex) {\n          return _this3.setState({\n            tabIndex: tabIndex\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(TabList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, t('Arrivals')), React.createElement(Tab, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, t('Departures'))), React.createElement(TabPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(DataDisplay, {\n        display: \"arrival\",\n        filteredData: arrivalData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), errorDisplay), React.createElement(TabPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(DataDisplay, {\n        display: \"departure\",\n        filteredData: departureData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), errorDisplay));\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(SearchBar, {\n        placeholder: t('Look for train station'),\n        noOptionsMessage: function noOptionsMessage(inputValue) {\n          return t('Not found');\n        },\n        options: this.state.passengerStations,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), content);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default withTranslation()(App);","map":{"version":3,"sources":["C:\\Users\\thang\\React\\react-trains-master\\react-trains-master\\src\\App.js"],"names":["React","Component","Tab","Tabs","TabList","TabPanel","withTranslation","Header","SearchBar","DataDisplay","API","App","props","handleInputChange","selectedStation","setState","filterData","state","error","stations","passengerStations","todaysTrains","arrivalData","departureData","tabIndex","fetchAll","document","title","t","dateNow","Date","toISOString","slice","Promise","all","fetch","then","response","json","allResponses","map","station","value","stationShortCode","label","stationName","includes","filter","passengerTraffic","dateTimeNow","toJSON","filteredData","train","trainNumber","commuterLineID","trainType","originShortCode","timeTableRows","origin","find","destinationShortCode","length","destination","scheduledArrivalTime","actualArrivalTime","arrivalTimeTable","element","type","hasOwnProperty","scheduledTime","actualTime","liveEstimateTime","scheduledDepartureTime","actualDepartureTime","departureTimeTable","trainCategory","entry","errorDisplay","message","content","inputValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { withTranslation } from 'react-i18next';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport DataDisplay from './components/DataDisplay/DataDisplay';\n\nconst API = 'https://rata.digitraffic.en/api/v1/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      stations: [], // needed as sometimes origin or destination isn't a passenger station\n      passengerStations: [], //used for displaying suggestions in search input\n      todaysTrains: [],\n      selectedStation: null,\n      arrivalData: [],\n      departureData: [],\n      tabIndex: 0 // 0 = arrivals, 1 = departures\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate() {\n    document.title = this.props.t('title'); // when user switches language\n  }\n\n  handleInputChange = selectedStation => {\n    this.setState({ selectedStation });\n    this.filterData(selectedStation);\n  };\n\n  fetchAll() {\n    const dateNow = new Date().toISOString().slice(0, 10); // format of type 2019-02-12\n    Promise.all([\n      fetch(`${API}metadata/stations`).then(response => response.json()),\n      fetch(`${API}trains/${dateNow}`).then(response => response.json())\n    ]).then(\n      allResponses => {\n        const stations = allResponses[0].map(station => ({\n          value: station.stationShortCode,\n          label: station.stationName.includes(' asema')\n            ? station.stationName.slice(0, -6)\n            : station.stationName\n        }));\n        const passengerStations = allResponses[0]\n          .filter(station => station.passengerTraffic === true)\n          .map(station => ({\n            value: station.stationShortCode,\n            label: station.stationName.includes(' asema')\n              ? station.stationName.slice(0, -6)\n              : station.stationName\n          }));\n        const todaysTrains = allResponses[1];\n        this.setState({ stations, passengerStations, todaysTrains });\n      },\n      error => {\n        this.setState({ error });\n      }\n    );\n  }\n\n  filterData(selectedStation) {\n    const { todaysTrains, stations } = this.state;\n    const dateTimeNow = new Date().toJSON();\n    const filteredData = todaysTrains\n      .map(train => {\n        const trainNumber = train.commuterLineID\n          ? `Commuter train ${train.commuterLineID}`\n          : `${train.trainType} ${train.trainNumber}`; //special case for Commuter trains who have their own ID\n        const originShortCode = train.timeTableRows[0].stationShortCode; // the origin (Lähtöasema) is the first entry in the timeTable\n        const origin = stations.find(\n          station => station.value === originShortCode\n        ).label; // retrieves the full name of station by short code\n        const destinationShortCode =\n          train.timeTableRows[train.timeTableRows.length - 1][\n            'stationShortCode'\n          ];\n        const destination = stations.find(\n          station => station.value === destinationShortCode\n        ).label;\n\n        let scheduledArrivalTime; // arrivals\n        let actualArrivalTime;\n        const arrivalTimeTable = {\n          ...train.timeTableRows.filter(\n            element =>\n              element.stationShortCode === selectedStation.value &&\n              element.type === 'ARRIVAL'\n          )[0]\n        };\n        if (arrivalTimeTable) {\n          if (arrivalTimeTable.hasOwnProperty('scheduledTime')) {\n            scheduledArrivalTime = arrivalTimeTable.scheduledTime;\n          }\n          if (arrivalTimeTable.hasOwnProperty('actualTime')) {\n            actualArrivalTime = arrivalTimeTable.actualTime;\n          } else if (arrivalTimeTable.hasOwnProperty('liveEstimateTime')) {\n            actualArrivalTime = arrivalTimeTable.liveEstimateTime;\n          } else {\n            actualArrivalTime = false;\n          }\n        }\n        let scheduledDepartureTime; // departures\n        let actualDepartureTime;\n        const departureTimeTable = {\n          ...train.timeTableRows.filter(\n            element =>\n              element.stationShortCode === selectedStation.value &&\n              element.type === 'DEPARTURE'\n          )[0]\n        };\n        if (departureTimeTable) {\n          if (departureTimeTable.hasOwnProperty('scheduledTime')) {\n            scheduledDepartureTime = departureTimeTable.scheduledTime;\n          }\n          if (departureTimeTable.hasOwnProperty('actualTime')) {\n            actualDepartureTime = departureTimeTable.actualTime;\n          } else if (departureTimeTable.hasOwnProperty('liveEstimateTime')) {\n            actualDepartureTime = departureTimeTable.liveEstimateTime;\n          } else {\n            actualDepartureTime = false;\n          }\n        }\n\n        return {\n          ...train,\n          trainNumber,\n          origin,\n          destination,\n          scheduledArrivalTime,\n          actualArrivalTime,\n          scheduledDepartureTime,\n          actualDepartureTime\n        };\n      })\n      .filter(train => train.trainCategory !== 'Cargo') // removes cargo entries\n      .filter(\n        train =>\n          train.actualArrivalTime > dateTimeNow ||\n          train.scheduledArrivalTime > dateTimeNow ||\n          train.actualDepartureTime > dateTimeNow ||\n          train.scheduledDepartureTime > dateTimeNow\n      ); // filters only time entries after \"now\"\n    const arrivalData = filteredData\n      .filter(entry => typeof entry.scheduledArrivalTime !== 'undefined')\n      .map(entry => ({\n        ...entry,\n        actualTime: entry.actualArrivalTime,\n        scheduledTime: entry.scheduledArrivalTime\n      }));\n    const departureData = filteredData\n      .filter(entry => typeof entry.scheduledDepartureTime !== 'undefined')\n      .map(entry => ({\n        ...entry,\n        actualTime: entry.actualDepartureTime,\n        scheduledTime: entry.scheduledDepartureTime\n      }));\n    this.setState({ arrivalData, departureData });\n  }\n\n  render() {\n    const {\n      error,\n      tabIndex,\n      arrivalData,\n      departureData,\n      todaysTrains\n    } = this.state;\n    const { t } = this.props;\n    const errorDisplay = (\n      <div className=\"error\">{error ? error.message : null}</div>\n    );\n    const content =\n      todaysTrains.length === 0 ? (\n        <p className=\"loading\">{t('Loading')}...</p>\n      ) : (\n        <Tabs\n          selectedIndex={tabIndex}\n          onSelect={tabIndex => this.setState({ tabIndex })}\n        >\n          <TabList>\n            <Tab>{t('Arrivals')}</Tab>\n            <Tab>{t('Departures')}</Tab>\n          </TabList>\n          <TabPanel>\n            <DataDisplay display=\"arrival\" filteredData={arrivalData} />\n            {errorDisplay}\n          </TabPanel>\n          <TabPanel>\n            <DataDisplay display=\"departure\" filteredData={departureData} />\n            {errorDisplay}\n          </TabPanel>\n        </Tabs>\n      );\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchBar\n          placeholder={t('Look for train station')}\n          noOptionsMessage={inputValue => t('Not found')}\n          options={this.state.passengerStations}\n          onChange={this.handleInputChange}\n        />\n        {content}\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(App);\n"]},"metadata":{},"sourceType":"module"}